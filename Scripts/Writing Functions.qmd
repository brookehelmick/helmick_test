---
title: "Writing Functions"
author: "Brooke Helmick"
format: 
  html: 
    toc: true
    code-fold: true 
    embed-resources: true 
---

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(here)
library(janitor)
```


## Temperature Conversion 

```{r}
airtemps <- c(212, 30.3, 78, 32)
celsius1 <- (airtemps[1] - 32)* 5 / 9
celsius2 <- (airtemps[2] - 32)* 5 / 9
celsius3 <- (airtemps[3] - 32)* 5 / 9
```

```{r}
convert_f_to_c <- function(fahr) {
  celsius <- (fahr -32)* 5 / 9 
  return(celsius)
}

celsius1a <- convert_f_to_c(airtemps[1])
airtemps_c <- convert_f_to_c(airtemps)
```

### Exercise: convert celsius to farenheit 

```{r}
airtemps_c <- c(12, 45, 17, 22)
faren1 <- (airtemps_c[1]*(9/5) + 32)
faren2 <- (airtemps_c[2]*(9/5) + 32)
faren3 <- (airtemps_c[3]*(9/5) + 32)
```

```{r}
convert_c_to_f <- function(cels) {
  farh <- (cels*(9/5) + 32)
  return(farh)
}

faren1a <- convert_c_to_f(airtemps_c)
```

```{r}
convert_temps <- function(fahr) {
  celsius <- (fahr - 32) * 5 / 9 
  kelvin <- celsius + 237.15
  return(list(f = fahr, 
              c = celsius, 
              k = kelvin))
}

t_vec <- c(-100, -40, 0, 32, 98.6, 212)
convert_temps(t_vec)
```

```{r}
convert_temps2 <- function(temp, unit = 'F') {
  ## error checking 
  unit <- toupper(unit)
  if(!unit %in% c('F', 'C')) stop('Unit must be C or F')

  if(unit == 'F') {
    fahr <- temp
    celsius <- convert_f_to_c(fahr)
  } else {
    celsius <- temp 
    fahr <- convert_c_to_f(celsius)
  }
  kelvin <- celsius + 273.15 
  
  out_df <- data.frame(fahr, celsius, kelvin)
  return(out_df)
}
```


```{r}
c_temps_df <- convert_temps2(temp = t_vec, unit = 'C')
f_temps_df <- convert_temps2(t_vec, unit = "F")
```

## Functions in TidyVerse 

```{r}
f_temps_df %>% 
  select(fahr, celsius) %>% 
  mutate(rankine = fahr + 459.67)
```


```{r}
calc_hotcold <- function(df, thresh = 70) {
  if(!'fahr' %in% names(df)) stop('The data frame must contain a column called fahr')
  
  out_df <- df %>% 
    mutate(hotcold = if_else(condition = (fahr > thresh), 
                             true = 'hot', 
                             false = 'cold'))
}

f_temps_df %>% 
  select(fahr, celsius) %>% 
  calc_hotcold(thresh = 55) %>% 
  arrange(desc(fahr))
```

## Create a custo theme for ggplot()

```{r}
make_beautiful <- function(base_size = 9) { 
  ggplot2::theme_bw() + 
    ggplot2::theme( 
      text = element_text(family = 'serif', 
                          color = 'purple',
                          size = base_size), 
      plot.title = element_text(size = rel*1.25, 
                                hjust = 0.5,  
                                face = 'bold'), 
      panel.background = element_rect(fill = 'azure')
    )
}

ggplot(f_temps_df, aes(make_beautiful))
```

